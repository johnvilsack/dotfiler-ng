#!/usr/bin/env bash
# dotfiler-ng - Simple dotfiles management with rsync
# Compatible with bash 3.2+ (macOS default)

# Program info
PROGRAM_NAME="dotfiler"
VERSION="5.0.0"

# Find library directory
if [[ -L "$0" ]]; then
    # Follow symlink
    SCRIPT_PATH="$(readlink "$0")"
    LIB_DIR="$(dirname "$SCRIPT_PATH")/dotfiler_lib"
else
    # Direct execution
    SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")"
    LIB_DIR="$(dirname "$SCRIPT_PATH")/dotfiler_lib"
fi

# Source library files
source "$LIB_DIR/common.sh"
source "$LIB_DIR/config.sh"
source "$LIB_DIR/track.sh"
source "$LIB_DIR/ignore.sh"
source "$LIB_DIR/delete.sh"
source "$LIB_DIR/sync.sh"
source "$LIB_DIR/list.sh"
source "$LIB_DIR/status.sh"

# Initialize configuration
init_config

# Show help
show_help() {
    cat << EOF
dotfiler-ng v$VERSION - Simple dotfiles management with rsync

Usage: $PROGRAM_NAME <command> [arguments]

Commands:
  track <path>        Add file/directory to tracking (alias: add)
  ignore <pattern>    Add pattern to ignore list
  delete <path>       Delete and tombstone a tracked item
  remove <path>       Remove from tracking without deletion
  sync                Sync tracked items between filesystem and repository
  sync --repo-first   Fresh install mode - repository overwrites filesystem
  list                List all tracked items
  status              Show configuration and sync status
  help                Show this help message

Configuration:
  Config files are stored in: ~/.config/dotfiler/
  Repository path: ${REPO_PATH:-\$DOTFILESPATH or ~/github/dotfiles}

Examples:
  $PROGRAM_NAME track ~/.zshrc
  $PROGRAM_NAME track ~/.config/nvim
  $PROGRAM_NAME ignore "*.log"
  $PROGRAM_NAME sync
  $PROGRAM_NAME delete ~/.config/old-app

EOF
}

# Main command dispatcher
main() {
    local cmd="${1:-}"
    shift || true
    
    case "$cmd" in
        track|add)
            cmd_track "$@"
            ;;
        ignore)
            cmd_ignore "$@"
            ;;
        delete)
            cmd_delete "$@"
            ;;
        remove)
            cmd_remove "$@"
            ;;
        sync|build)
            cmd_sync "$@"
            ;;
        list)
            cmd_list "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        help|--help|-h|"")
            show_help
            ;;
        version|--version|-v)
            echo "$PROGRAM_NAME v$VERSION"
            ;;
        *)
            log_error "Unknown command: $cmd"
            echo "Run '$PROGRAM_NAME help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"